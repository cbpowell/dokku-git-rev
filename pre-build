#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"

revision_info_pre_build_buildpack() {
  local APP="$1"; local IMAGE="dokku/$APP"
  
  # Ensure the .dokku-git-rev file actually exists
  [[ ! -f "$DOKKU_ROOT/$APP/.dokku-git-rev" ]] && exit 0
  
  # Grab the REV
  GIT_REV=$(tail -1 "$DOKKU_ROOT/$APP/.dokku-git-rev")

  local REV_INFO="$(cat <<-EOF
export GIT_REV='$GIT_REV'
EOF
  )"

  dokku_log_info1 "Adding GIT_REV to build environment..."

  # Create build env files for use in buildpacks like this:
  # https://github.com/niteoweb/heroku-buildpack-buildout/blob/5879fa3418f7d8e079f1aa5816ba1adde73f4948/bin/compile#L34
  local id=$(echo $REV_INFO | sed -e 's@export @@g' -e 's@\\n@ @g' | docker run "$DOKKU_GLOBAL_RUN_ARGS" -i -a stdin "$IMAGE" /bin/bash -c "for ENV_VAR in $(cat); do echo \$ENV_VAR |sed 's@^\([^=]*\)=\(.*\)\$@echo \\\"\2\\\" >/tmp/env/\1@g' >>/tmp/set_env.sh; done && mkdir -p /tmp/env && /bin/bash /tmp/set_env.sh")
  test $(docker wait $id) -eq 0
  docker commit $id $IMAGE > /dev/null

  # Create build env for 'old style' buildpacks and dokku plugins
  local id=$(echo -e "$REV_INFO" | docker run "$DOKKU_GLOBAL_RUN_ARGS" -i -a stdin "$IMAGE" /bin/bash -c "cat >> /app/.env")
  test "$(docker wait "$id")" -eq 0
  docker commit "$id" "$IMAGE" > /dev/null
}

revision_info_pre_build_buildpack "$@"